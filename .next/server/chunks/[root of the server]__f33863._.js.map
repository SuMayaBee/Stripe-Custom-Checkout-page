{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///home/msi/Desktop/Diligent%20Travels/nextjs-stripe-custom-checkout/src/lib/clients/stripe/server.ts"],"sourcesContent":["import Stripe from \"stripe\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n\tthrow new Error(\"STRIPE_SECRET_KEY is not set\");\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n\ttypescript: true,\n});\n\nexport { stripe };\n"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IACnC,MAAM,IAAI,MAAM;AACjB;AAEA,MAAM,SAAS,IAAI,4MAAA,CAAA,UAAM,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IACxD,YAAY;AACb"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///home/msi/Desktop/Diligent%20Travels/nextjs-stripe-custom-checkout/src/app/api/payments/create-payment-intent/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { stripe } from \"@/lib/clients/stripe/server\";\nimport { z } from \"zod\";\n\nconst createPaymentIntentSchema = z.object({\n\tamount: z.number().min(1, \"Amount must be at least $1\").max(999999, \"Amount too large\"),\n});\n\nexport async function POST(request: Request) {\n\ttry {\n\t\tconst body = await request.json();\n\t\tconst result = createPaymentIntentSchema.safeParse(body);\n\n\t\tif (!result.success) {\n\t\t\treturn NextResponse.json(\n\t\t\t\t{\n\t\t\t\t\terror: \"Invalid request\",\n\t\t\t\t\tdetails: result.error.issues,\n\t\t\t\t},\n\t\t\t\t{ status: 400 }\n\t\t\t);\n\t\t}\n\n\t\tconst { amount } = result.data;\n\n\t\t// Convert dollars to cents for Stripe\n\t\tconst amountInCents = Math.round(amount * 100);\n\n\t\tconst paymentIntent = await stripe.paymentIntents.create({\n\t\t\tamount: amountInCents,\n\t\t\tcurrency: \"usd\",\n\t\t\tautomatic_payment_methods: {\n\t\t\t\tenabled: true,\n\t\t\t},\n\t\t\tmetadata: {\n\t\t\t\tcustom_amount: amount.toString(),\n\t\t\t},\n\t\t});\n\n\t\treturn NextResponse.json({\n\t\t\tclientSecret: paymentIntent.client_secret,\n\t\t});\n\t} catch (error) {\n\t\tconsole.error(\"Error creating payment intent:\", error);\n\n\t\tif (error instanceof z.ZodError) {\n\t\t\treturn NextResponse.json(\n\t\t\t\t{\n\t\t\t\t\terror: \"Validation error\",\n\t\t\t\t\tdetails: error.issues,\n\t\t\t\t},\n\t\t\t\t{ status: 400 }\n\t\t\t);\n\t\t}\n\n\t\treturn NextResponse.json(\n\t\t\t{ error: \"Failed to create payment intent\" },\n\t\t\t{ status: 500 }\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,4BAA4B,uLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,QAAQ,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,8BAA8B,GAAG,CAAC,QAAQ;AACrE;AAEO,eAAe,KAAK,OAAgB;IAC1C,IAAI;QACH,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,SAAS,0BAA0B,SAAS,CAAC;QAEnD,IAAI,CAAC,OAAO,OAAO,EAAE;YACpB,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACvB;gBACC,OAAO;gBACP,SAAS,OAAO,KAAK,CAAC,MAAM;YAC7B,GACA;gBAAE,QAAQ;YAAI;QAEhB;QAEA,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,IAAI;QAE9B,sCAAsC;QACtC,MAAM,gBAAgB,KAAK,KAAK,CAAC,SAAS;QAE1C,MAAM,gBAAgB,MAAM,2IAAA,CAAA,SAAM,CAAC,cAAc,CAAC,MAAM,CAAC;YACxD,QAAQ;YACR,UAAU;YACV,2BAA2B;gBAC1B,SAAS;YACV;YACA,UAAU;gBACT,eAAe,OAAO,QAAQ;YAC/B;QACD;QAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACxB,cAAc,cAAc,aAAa;QAC1C;IACD,EAAE,OAAO,OAAO;QACf,QAAQ,KAAK,CAAC,kCAAkC;QAEhD,IAAI,iBAAiB,uLAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAChC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACvB;gBACC,OAAO;gBACP,SAAS,MAAM,MAAM;YACtB,GACA;gBAAE,QAAQ;YAAI;QAEhB;QAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACvB;YAAE,OAAO;QAAkC,GAC3C;YAAE,QAAQ;QAAI;IAEhB;AACD"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}